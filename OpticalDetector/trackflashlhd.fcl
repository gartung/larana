#include "services_microboone.fcl"
#include "opticaldetectormodules_microboone.fcl"
#include "cosmicremovalmodules.fcl"
#include "photpropservices_microboone.fcl"

process_name: OpticalLHDAna

services:
{
  # Load the service that manages root files for histograms.
  TFileService: { fileName: "OpticalLHDAna_hist.root" }
  Timing:       {}
  SimpleMemoryCheck:     { ignoreTotal: 1 } # default is one
  RandomNumberGenerator: {} #ART native random number generator
  user: @local::microboone_services_reco
}

services.user.PhotonVisibilityService: @local::microboone_photonvisibilityservice
services.user.OpDigiProperties:        @local::microboone_opdigiproperties

#Start each new event with an empty event.
source:
{
  maxEvents:   10       # Number of events to run over
}



outputs:
{
 out1:
 {
   module_type: RootOutput
   fileName:    "OpticalAna.root" #default file name, can override from command line with -o or --output
 }
}

# Define and configure some modules to do work on each event.
# First modules are defined; they are scheduled later.
# Modules are grouped by type.
physics:
{

 producers:{ 
 	     trkpmtlhd:  @local::standard_tracktimeassoc
           }

# filters:{}
  analyzers:
 	{
 	 trkpmtlhdana:		    @local::standard_tracktimeassocana
         opflashana:                @local::standard_opflashana
#	 opflashtruthana:	    @local::standard_flashhypothesistruthana
 	}

    reco: [ trkpmtlhd ] 
    ana:  [ trkpmtlhdana, opflashana #, opflashtruthana 
          ]

 #end_paths is a keyword and contains the paths that do not modify the art::Event, 
 #ie analyzers and output streams.  these all run simultaneously
 stream1: [ out1 ]
 trigger_paths: [ reco ]	
 end_paths:     [ stream1, ana ]  
}

outputs:
{
 out1:
 {
   module_type: RootOutput
   fileName:    "OpticalLHD.root" 
   compressionLevel: 1
 }
}

physics.producers.trkpmtlhd.module_type: "TrackPMTLHD"
physics.producers.trkpmtlhd.TrackModuleLabel: "trackkalmanhit"
physics.producers.trkpmtlhd.FlashModuleLabel: "opflash"
physics.producers.trkpmtlhd.PairingMode: 0 # (1 gives no flash-track matches!)
physics.producers.trkpmtlhd.LengthCut: 20 # at least this length track [cm]
physics.producers.trkpmtlhd.PECut: 20   # at least this many PEs in a flash

physics.analyzers.trkpmtlhdana.module_type: "TrackTimeAssocAna" # in fact, the default
physics.analyzers.trkpmtlhdana.TrackModuleLabel: "trackkalmanhit"
physics.analyzers.trkpmtlhdana.FlashModuleLabel: "opflash"
physics.analyzers.trkpmtlhdana.MatchModuleLabel: "trkpmtlhd"

physics.analyzers.opflashana.MakeFlashTimeHist:       true
physics.analyzers.opflashana.MakeFlashPosHist:        true
physics.analyzers.opflashana.MakePerFlashHists:       true
