#include "services_microboone.fcl"
#include "opticaldetectormodules.fcl"
#include "cosmicremovalmodules.fcl"


processname:OpticalAna

services:
{
  # Load the service that manages root files for histograms.
  TFileService: { fileName: "OpticalRecoAna.root" }
  Timing:       {}
  SimpleMemoryCheck:     { ignoreTotal: 1 } # default is one
  RandomNumberGenerator: {} #ART native random number generator
  user: @local::microboone_services
}

#Start each new event with an empty event.
source:
{
  maxEvents:   10       # Number of events to run over
}



outputs:
{
 out1:
 {
   module_type: RootOutput
   fileName:    "OpticalAna.root" #default file name, can override from command line with -o or --output
 }
}

# Define and configure some modules to do work on each event.
# First modules are defined; they are scheduled later.
# Modules are grouped by type.
physics:
{

 producers:{
	 trkpmtlhd: @local::microboone_tracktimeassoc
}

# filters:{}
  
  trigger_paths: [ trkpmtlhd ]

 analyzers:
 	{
	trkpmtlhdana:		    @local::standard_tracktimeassocana
        opflashana:                 @local::standard_opflashana
	opflashtruthana:	    @local::standard_flashhypothesistruthana
 	}

    ana:  [ trkpmtlhdana, opflashana, opflashtruthana ]

 #end_paths is a keyword and contains the paths that do not modify the art::Event, 
 #ie analyzers and output streams.  these all run simultaneously
 end_paths:     [ ana ]  
}

physics.producers.trkpmtlhd.module_type: "TrackPMTLHD_module.cc"
physics.producers.trkpmtlhd.TrackModuleLabel: "track3dkalmanhit"
physics.producers.trkpmtlhdana.MatchModuleLabel: "trkpmtlhd" 

physics.analyzers.opflashana.MakeFlashTimeHist:       true
physics.analyzers.opflashana.MakeFlashPosHist:        true
physics.analyzers.opflashana.MakePerFlashHists:       true
