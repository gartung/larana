#include "services_lar1nd.fcl"

#include "GenieReweightGenerator.fcl"

process_name: genieReWeight

services:
{
  # Load the service that manages root files for histograms.
  TFileService: { fileName: "genieRW_hist.root" }
  Timing:       {}
  SimpleMemoryCheck:     { ignoreTotal: 1 } # default is one
  RandomNumberGenerator: {} #ART native random number generator
  user:         @local::lar1nd_services
}

#source is now a root file
source:
{
  module_type: RootInput
  maxEvents:  -1      # Number of events to create
}

outputs:
{
 out1:
 {
   module_type: RootOutput
   fileName:    "genieRW.root" #default file name, can override from command line with -o or --output
   #SelectEvents: {SelectEvents: [reco] }
 }

 
}

physics:
{

  producers:{}
 
  filters:{} 
 
  analyzers:{
    genieRW:  @local::standard_genieRW
  }

  #define the producer and filter modules for this path, order matters, 
  #filters reject all following items.  see lines starting physics.producers below
  #define the output stream, there could be more than one if using filters 
  stream1:  [ out1 ]

  ana: [genieRW]

  #trigger_paths is a keyword and contains the paths that modify the art::event, 
  #ie filters and producers
  trigger_paths: [] 

 #end_paths is a keyword and contains the paths that do not modify the art::Event, 
 #ie analyzers and output streams.  these all run simultaneously
 end_paths:     [ stream1, ana ] 
}

physics.analyzers.genieRW.Weights:            ["QEMA", "CCRes", "QEVec", "NCRes"]
physics.analyzers.genieRW.RandSeed:           65539
physics.analyzers.genieRW.NWeights:           5
physics.analyzers.genieRW.GenieModuleLabel:   generator

