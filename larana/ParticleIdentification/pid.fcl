#include "services.fcl"

#include "caldata.fcl"
#include "filters.fcl"
#include "hitfindermodules.fcl"
#include "clustermodules.fcl"

#include "trackfindermodules.fcl"
#include "matchtracksmodule.fcl"
#include "vertexfindermodules.fcl"
#include "calorimetry.fcl"
#include "particleid.fcl"
#include "analysistreemodule.fcl"

process_name: Reco

services:
{
  # Load the service that manages root files for histograms.
  TFileService: { fileName: "pid_hist.root" }
  TimeTracker:  {}
  MemoryTracker:     { ignoreTotal: 1 } # default is one
  RandomNumberGenerator: {} #ART native random number generator
                @table::argoneut_services
}


#source is now a root file
source:
{
  module_type: RootInput
  maxEvents:  -1      # Number of events to create
}

outputs:
{
 out1:
 {
   module_type: RootOutput
   fileName:    "standard_reco.root" #default file name, can override from command line with -o or --output
   SelectEvents: {SelectEvents: [reco] }
 }

 
}

# Define and configure some modules to do work on each event.
# First modules are defined; they are scheduled later.
# Modules are grouped by type.
physics:
{

 producers:{}

 filters:{} 

  analyzers:{}

 #define the producer and filter modules for this path, order matters, 
 #filters reject all following items.  see lines starting physics.producers below
 # reco: [  scanfilt, caldata, ffthit, dbcluster, hough, linemerger, track3d  ] 
  reco: [ filter, caldata, ffthit, dbcluster, hough, linemerger, vertex2d, spacepts, matchtracks, calo, pid  ]
# reco: [   caldata, ffthit, dbcluster, hough, linemerger, track3d  ]
 # reco: [ scanfilt ]
  ana: [ analysistree ]
# ana: [matchtracks]
 #define the output stream, there could be more than one if using filters 
  stream1:  [ out1 ]

 #trigger_paths is a keyword and contains the paths that modify the art::event, 
 #ie filters and producers
   trigger_paths: [reco] 

 #end_paths is a keyword and contains the paths that do not modify the art::Event, 
 #ie analyzers and output streams.  these all run simultaneously
 #end_paths:     [ stream1, ana ] 
 end_paths:     [  ana ] 
}

# define the list of LArSoft modules to run through the simulate path
#physics.filters.scanfilt:    @local::argoneut_scanfilter
physics.producers.filter:       @local::evtfilter
physics.producers.caldata:      @local::argoneut_calwire	
physics.producers.ffthit:       @local::argoneut_hitfinder	
physics.producers.dbcluster:    @local::argoneut_dbcluster	
physics.producers.hough:        @local::argoneut_houghlinefinder
physics.producers.linemerger:   @local::argoneut_linemerger
physics.producers.vertex2d:     @local::argoneut_vertex2d
physics.producers.spacepts:     @local::argoneut_spacepts
physics.producers.matchtracks:  @local::argoneut_matchtracks
physics.producers.calo:         @local::argoneut_calo
physics.producers.pid:          @local::argoneut_chi2pid
physics.analyzers.analysistree: @local::argoneut_analysistree
physics.producers.filter.BadEvents:    [5]
physics.producers.filter.BadRuns:      [10]
physics.producers.matchtracks.lartracks:         "spacepts"
physics.producers.calo.TrackModuleLabel:         "spacepts"
physics.analyzers.pid.TrackModuleLabel:          "spacepts"
physics.analyzers.analysistree.TrackModuleLabel: "spacepts"

