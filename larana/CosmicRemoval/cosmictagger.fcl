#include "clusteralgorithms.fcl"
#include "trackfindermodules.fcl"
#include "cosmicremovalmodules.fcl"
#include "services_microboone.fcl"
#include "opticaldetectormodules_microboone.fcl"
#include "photpropservices_microboone.fcl"

process_name: FindCosmicsANA

services:
{
# Load the service that manages root files for histograms.
  TFileService: { fileName: "cosmicOverlayonlyANA.root" }
#  scheduler:    { wantTracer: true wantSummary: true }
#  MessageLogger:
#  {
#    destinations: ["detailedInfo"]
#    categories:   ["Summary"]
#    debugModules: ["*"]
#    detailedInfo: {threshold: "Info"}
#    }
  
  message:      {}
  TimeTracker:  {}
  RandomNumberGenerator: {} #ART native random number generator
  message:      @local::standard_info
                @table::microboone_services_reco
}

services.PhotonVisibilityService: @local::microboone_photonvisibilityservice

#source is now a root file
source:
{
    module_type: RootInput
    maxEvents:  -1        # Number of events to create
}



# Define and configure some modules to do work on each event.
# First modules are defined; they are scheduled later.
# Modules are grouped by type.
physics:
{

 producers:
 {
    cosmictaggerKHit: @local::microboone_cosmictracktagger
    cosmictaggerBezier: @local::microboone_cosmictracktagger
    flashTrackMatchkHit:   @local::microboone_beamflashtrackmatchtagger
    flashTrackMatchBezier: @local::microboone_beamflashtrackmatchtagger
 }
 
 analyzers:
 {
     #cosmictaggerana:  @local::microboone_cosmicremovalana
 }
 
 #define the producer and filter modules for this path, order matters, 
 #filters reject all following items.  see lines starting physics.producers below
 reco: [ cosmictaggerKHit, cosmictaggerBezier, flashTrackMatchkHit, flashTrackMatchBezier ]
 ana: [ ]

 
 #define the output stream, there could be more than one if using filters
 stream1:  [ out1 ]


 #trigger_paths is a keyword and contains the paths that modify the art::event, 
 #ie filters and producers
 trigger_paths: [reco]


 #end_paths is a keyword and contains the paths that do not modify the art::Event, 
 #ie analyzers and output streams.  these all run simultaneously
 #end_paths:     [stream1, ana]
 end_paths:     [stream1]

}

#block to define where the output goes.  if you defined a filter in the physics
#block and put it in the trigger_paths then you need to put a SelectEvents: {SelectEvents: [XXX]}
#entry in the output stream you want those to go to, where XXX is the label of the filter module(s)
outputs:
{
 out1:
 {
   module_type: RootOutput
   fileName:    "tagger_flash_match_cosmics.root" #default file name, can override from command line with -o or --output
   compressionLevel: 1
 }
}

physics.producers.cosmictaggerKHit.TrackModuleLabel: "trackkalmanhit"                                                                                          
physics.producers.cosmictaggerKHit.ClusterModuleLabel: "fuzzycluster"                                                                                                 

physics.producers.cosmictaggerBezier.TrackModuleLabel: "beziertracker"                                                                                         
physics.producers.cosmictaggerBezier.ClusterModuleLabel: "fuzzycluster"       

physics.producers.flashTrackMatchkHit.TrackModuleLabel: "trackkalmanhit"
physics.producers.flashTrackMatchkHit.FlashModuleLabel: "opflash"
#physics.producers.flashTrackMatchkHit.BeamFlashTrackMatchAlgParams.RunDebugMode: true

physics.producers.flashTrackMatchBezier.TrackModuleLabel: "beziertracker"
physics.producers.flashTrackMatchBezier.FlashModuleLabel: "opflash"
