////////////////////////////////////////////////////////////////////////
// Class:       TrackContainmentAnalyzer
// Module Type: analyzer
// File:        TrackContainmentAnalyzer_module.cc
//
// Generated at Tue Nov 10 13:06:09 2015 by Wesley Ketchum using artmod
// from cetpkgsupport v1_08_07.
////////////////////////////////////////////////////////////////////////

#include "art/Framework/Core/EDAnalyzer.h"
#include "art/Framework/Core/ModuleMacros.h"
#include "art/Framework/Principal/Event.h"
#include "art/Framework/Principal/Handle.h"
#include "art/Framework/Principal/Run.h"
#include "art/Framework/Principal/SubRun.h"
#include "canvas/Utilities/InputTag.h"
#include "fhiclcpp/ParameterSet.h"
#include "messagefacility/MessageLogger/MessageLogger.h"

#include "art/Framework/Services/Optional/TFileService.h"

#include "TTree.h"

#include "TrackContainment/TrackContainmentAlg.hh"
#include "larcore/Geometry/Geometry.h"

namespace trk {
  class TrackContainmentAnalyzer;
}

class trk::TrackContainmentAnalyzer : public art::EDAnalyzer {
public:
  explicit TrackContainmentAnalyzer(fhicl::ParameterSet const & p);
  // The destructor generated by the compiler is fine for classes
  // without bare pointers or other resource use.

  // Plugins should not be copied or assigned.
  TrackContainmentAnalyzer(TrackContainmentAnalyzer const &) = delete;
  TrackContainmentAnalyzer(TrackContainmentAnalyzer &&) = delete;
  TrackContainmentAnalyzer & operator = (TrackContainmentAnalyzer const &) = delete;
  TrackContainmentAnalyzer & operator = (TrackContainmentAnalyzer &&) = delete;

  // Required functions.
  void analyze(art::Event const & e) override;

  // Selected optional functions.
  void reconfigure(fhicl::ParameterSet const & p) ;

private:

  // Declare member data here.
  trk::TrackContainmentAlg fAlg;

  std::vector<std::string> fTrackModuleLabels;
  
};


trk::TrackContainmentAnalyzer::TrackContainmentAnalyzer(fhicl::ParameterSet const & p)
  :
  EDAnalyzer(p)  // ,
 // More initializers here.
{
  this->reconfigure(p);
  art::ServiceHandle<art::TFileService> tfs;
  fAlg.SetupOutputTree(tfs->make<TTree>("myanatree","MyAnalysis Tree"));
}

void trk::TrackContainmentAnalyzer::analyze(art::Event const & e)
{

  fAlg.SetRunEvent(e.run(),e.event());
  
  std::vector< std::vector<recob::Track> > trackVectors;
  for(size_t i_l=0; i_l<fTrackModuleLabels.size(); ++i_l){
    art::Handle< std::vector<recob::Track> > trackHandle;
    e.getByLabel(fTrackModuleLabels[i_l],trackHandle);
    trackVectors.push_back(*trackHandle);
  }
  
  art::ServiceHandle<geo::Geometry> geoHandle;

  fAlg.ProcessTracks(trackVectors,*geoHandle);

}

void trk::TrackContainmentAnalyzer::reconfigure(fhicl::ParameterSet const & p)
{
  fAlg.Configure(p.get<fhicl::ParameterSet>("TrackContainmentAlg"));
  fTrackModuleLabels = p.get< std::vector<std::string> >("TrackModuleLabels");
  fAlg.setFillOutputTree();
}

DEFINE_ART_MODULE(trk::TrackContainmentAnalyzer)
