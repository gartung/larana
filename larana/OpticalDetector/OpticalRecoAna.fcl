#include "services_microboone.fcl"
#include "opticaldetectormodules.fcl"

standard_opticalrecoana:
{
  module_type:            "OpticalRecoAna"
  FlashModule:            "null"
  TrackModule:            "null"
  KineticEnergyMin:       0.02
  TimeMatchMax:           100
}


microboone_opticalrecoana:   @local::standard_opticalrecoana

processname:OptcialRecoAnaProcess

services:
{
  # Load the service that manages root files for histograms.
  TFileService: { fileName: "OpticalRecoAna.root" }
  TimeTracker:  {}
  MemoryTracker:     { ignoreTotal: 1 } # default is one
  RandomNumberGenerator: {} #ART native random number generator
        @table::microboone_services
}

#Start each new event with an empty event.
source:
{
  maxEvents:   10       # Number of events to run over
}



outputs:
{
 out1:
 {
   module_type: RootOutput
   fileName:    "OpticalRecoAna.root" #default file name, can override from command line with -o or --output
 }
}

# Define and configure some modules to do work on each event.
# First modules are defined; they are scheduled later.
# Modules are grouped by type.
physics:
{

 producers:{
}

# filters:{}
  
  trigger_paths: [ ]

 analyzers:
 	{
        OpticalRecoAnaBezierTracks:  @local::microboone_opticalrecoana
        OpFlashAna:                  @local::standard_opflashana
 	}

    ana:  [ OpticalRecoAnaBezierTracks, OpFlashAna ]

 #end_paths is a keyword and contains the paths that do not modify the art::Event, 
 #ie analyzers and output streams.  these all run simultaneously
 end_paths:     [ ana ]  
}

physics.analyzers.OpticalRecoAnaBezierTracks.TrackModule:  "beziertracker"
physics.analyzers.OpticalRecoAnaBezierTracks.FlashModule:  "opflash"
physics.analyzers.OpFlashAna.MakeFlashTimeHist:       true
physics.analyzers.OpFlashAna.MakeFlashPosHist:        true
physics.analyzers.OpFlashAna.MakePerFlashHists:       true
