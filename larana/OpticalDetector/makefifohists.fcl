#include "services_microboone.fcl"
#include "opticaldetectormodules.fcl"

process_name: Ana

services:
{
  # Load the service that manages root files for histograms.
  TFileService: { fileName: "fifo_hist.root" }
  TimeTracker:  {}
  MemoryTracker:     { } # default is one
  RandomNumberGenerator: {} #ART native random number generator
  message:      @local::standard_warning
  FileCatalogMetadata:  @local::art_file_catalog_mc
}
services.FileCatalogMetadata.applicationVersion:  "S2013.06.25"

services.FileCatalogMetadataExtras:  @local::microboone_file_catalog
services.FileCatalogMetadataExtras.Metadata: [ "group",      "uboone",
                                                    "fileFormat", "root",
                                                    "fclName",    "standard_reco_uboone.fcl",
                                                    "fclVersion", "v1_5",
                                                    "ubProjectStage",   "reco",
                                                    "ubProjectVersion", "v1_3" ]
services.FileCatalogMetadataExtras.RenameTemplate: "${base .root}_${CLUSTER 0}_${PROCESS 0}_reco.root"

# stop the "ctor warning" madness, yet keep desired verbosity in Tracking.
services.message.destinations.warningmsg.categories.default.limit:1
services.message.destinations.warningmsg.categories.RecoBaseDefaultCtor.limit:0
services.message.destinations.warningmsg.categories.Track3DKalmanSPS.limit: 1000000
services.message.destinations.warningmsg.categories.Track3DKalmanSPS.reportEvery: 1
services.message.destinations.warningmsg.categories.Track3DKalmanSPS.timeSpan: 0

#source is now a root file
source:
{
  module_type: RootInput
  skipEvents:  1000        # Number of events to create
}

# Define and configure some modules to do work on each event.
# First modules are defined; they are scheduled later.
# Modules are grouped by type.
physics:
{

 analyzers:
 {
   fifohistana:  @local::standard_fifohistana

 }

 #define the producer and filter modules for this path, order matters, 
 #filters reject all following items.  see lines starting physics.producers below
 ana: [ fifohistana ] 

 #define the output stream, there could be more than one if using filters 
 stream1:  []

 #trigger_paths is a keyword and contains the paths that modify the art::event, 
 #ie filters and producers
 trigger_paths: [] 

 #end_paths is a keyword and contains the paths that do not modify the art::Event, 
 #ie analyzers and output streams.  these all run simultaneously
 end_paths:     [ana, stream1]  
}

#block to define where the output goes.  if you defined a filter in the physics
#block and put it in the trigger_paths then you need to put a SelectEvents: {SelectEvents: [XXX]}
#entry in the output stream you want those to go to, where XXX is the label of the filter module(s)
outputs:
{
 out1:
 {
   module_type: RootOutput
   fileName:    "standard_reco_uboone.root"
   dataTier:    "reconstructed"
 }
}
